---
import Author from './Author.astro';
import BlogPicture from './BlogPicture.astro';
import { parse } from 'node-html-parser';

export interface Props {
	title: string;
	author: string;
	publishDate: string;
	heroImage: string;
	alt: string;
	text: string;
}

const { title, author, publishDate, heroImage, alt, text } = Astro.props;

const parsed_post = parse(text);
function addIframeClasses(node) {
	node.classList.add('outline-none');
	node.classList.add('w-full');
}

// remove first image since it's the hero image:
parsed_post.getElementsByTagName('img')[0]?.remove();
---

<div class='layout mb-20'>
	<article class='px-5'>
		<div>
			<header>
				{heroImage && (
					<img
						width="720"
						height="420"
						class="hero-image object-cover max-w-full"
						loading="lazy"
						src={heroImage}
						alt={alt}
					/>
				)}
				<h1 class='title-large mb-4'>{title}</h1>
			</header>

			<main class='text-body'>
				{parsed_post.childNodes.map((v) => {
					if (v.tagName != null) {
						v.classList.add('my-4')
					}

					if (v.childNodes.length > 0) {
						for (let n of v.childNodes) {
							if (n.tagName == 'IMG') {
								// console.log(n.getAttribute('data-orig-file'))
								return (
									<BlogPicture
										src={n.getAttribute('data-orig-file')}
										alt={n.getAttribute('alt')}
										title={n.getAttribute(
											'data-image-title'
										)}
										height={n.getAttribute('height')}
										class="my-4"
									/>
								)
							} else if (n.tagName == 'IFRAME') {
								addIframeClasses(n)
							}
						}
					}

					return v
				})}
			</main>

			<p class='publish-date'>
				{new Date(publishDate).toLocaleDateString('el-gr')}
			</p>
		</div>
	</article>
</div>

<style>
	/* .hero-image {
		object-fit: cover;
		object-position: center;
		margin-top: 2rem;
		margin-bottom: 4rem;
		max-width: calc(min(1280px, 100%));
	} */

	@media (max-width: 50em) {
		.hero-image {
			height: 260px;
			margin-top: 0;
			margin-bottom: 2rem;
		}
	}

	/* .content {
		margin-bottom: 8rem;
	}

	.content :global(main > * + *) {
		margin-top: 1rem;
	}

	.content :global(h2) {
		margin-top: 4rem;
	} */

	/* header {
		display: flex;
		flex-direction: column;
		text-align: center;
		align-items: center;
		justify-content: center;

		padding-bottom: 2rem;
		margin-bottom: 2rem;
		border-bottom: 4px solid var(--theme-divider);
	} */
</style>
